AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  passwordless-signin with e-mail verification

Globals:
  Function:
    Handler: app.lambda_handler
    Runtime: python3.9

Parameters:
  UserPoolName:
    Type: String
    Description: The name you want the User Pool to be created with
  SESFromAddress:
    Type: String
    Description: The e-mail address to send the secret login code from

Resources:
  StaticWebsiteBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: mirage-demo-examples-passwordless-signin
      WebsiteConfiguration:
        IndexDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: False
        BlockPublicPolicy: False
        IgnorePublicAcls: False
        RestrictPublicBuckets: False

  StaticWebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: StaticWebsiteBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowWebsiteAccess
            Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub "arn:${AWS::Partition}:s3:::${StaticWebsiteBucket}/*"

  DefineAuthChallenge:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: define_auth_challenge

  CreateAuthChallenge:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: create_auth_callenge
      Environment:
        Variables:
          SES_FROM_ADDRESS: !Ref SESFromAddress
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
              Resource: "*"

  VerifyAuthChallengeResponse:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: verify_auth_challenge_response

  PostAuthentication:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: post_authentication

  PreSignUp:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: pre_sign_up

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref UserPoolName
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
      UsernameAttributes:
        - email
      MfaConfiguration: "OFF"
      LambdaConfig:
        DefineAuthChallenge: !GetAtt DefineAuthChallenge.Arn
        CreateAuthChallenge: !GetAtt CreateAuthChallenge.Arn
        VerifyAuthChallengeResponse: !GetAtt VerifyAuthChallengeResponse.Arn
        PostAuthentication: !GetAtt PostAuthentication.Arn
        PreSignUp: !GetAtt PreSignUp.Arn

  SetUserAttributesPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: allow-set-user-attributes
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - cognito-idp:AdminUpdateUserAttributes
            Resource:
              - !GetAtt UserPool.Arn
      Roles:
        - !Ref PostAuthenticationRole

  DefineAuthChallengeInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt DefineAuthChallenge.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  CreateAuthChallengeInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CreateAuthChallenge.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  VerifyAuthChallengeResponseInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt VerifyAuthChallengeResponse.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  PostAuthenticationInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PostAuthentication.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  PreSignUpInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PreSignUp.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: email-auth-client
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows:
        - CUSTOM_AUTH_FLOW_ONLY

Outputs:
  UserPoolId:
    Description: ID of the User Pool
    Value: !Ref UserPool
  UserPoolClientId:
    Description: ID of the User Pool Client
    Value: !Ref UserPoolClient
  StaticWebsiteURL:
    Value: !GetAtt
      - StaticWebsiteBucket
      - WebsiteURL
    Description: URL for website hosted on S3
